# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_example', [dirname(__file__)])
        except ImportError:
            import _example
            return _example
        if fp is not None:
            try:
                _mod = imp.load_module('_example', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _example = swig_import_helper()
    del swig_import_helper
else:
    import _example
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _example.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _example.SwigPyIterator_value(self)
    def incr(self, n=1): return _example.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _example.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _example.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _example.SwigPyIterator_equal(self, *args)
    def copy(self): return _example.SwigPyIterator_copy(self)
    def next(self): return _example.SwigPyIterator_next(self)
    def __next__(self): return _example.SwigPyIterator___next__(self)
    def previous(self): return _example.SwigPyIterator_previous(self)
    def advance(self, *args): return _example.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _example.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _example.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _example.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _example.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _example.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _example.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _example.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class msgVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msgVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msgVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _example.msgVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _example.msgVector___nonzero__(self)
    def __bool__(self): return _example.msgVector___bool__(self)
    def __len__(self): return _example.msgVector___len__(self)
    def pop(self): return _example.msgVector_pop(self)
    def __getslice__(self, *args): return _example.msgVector___getslice__(self, *args)
    def __setslice__(self, *args): return _example.msgVector___setslice__(self, *args)
    def __delslice__(self, *args): return _example.msgVector___delslice__(self, *args)
    def __delitem__(self, *args): return _example.msgVector___delitem__(self, *args)
    def __getitem__(self, *args): return _example.msgVector___getitem__(self, *args)
    def __setitem__(self, *args): return _example.msgVector___setitem__(self, *args)
    def append(self, *args): return _example.msgVector_append(self, *args)
    def empty(self): return _example.msgVector_empty(self)
    def size(self): return _example.msgVector_size(self)
    def clear(self): return _example.msgVector_clear(self)
    def swap(self, *args): return _example.msgVector_swap(self, *args)
    def get_allocator(self): return _example.msgVector_get_allocator(self)
    def begin(self): return _example.msgVector_begin(self)
    def end(self): return _example.msgVector_end(self)
    def rbegin(self): return _example.msgVector_rbegin(self)
    def rend(self): return _example.msgVector_rend(self)
    def pop_back(self): return _example.msgVector_pop_back(self)
    def erase(self, *args): return _example.msgVector_erase(self, *args)
    def __init__(self, *args): 
        this = _example.new_msgVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _example.msgVector_push_back(self, *args)
    def front(self): return _example.msgVector_front(self)
    def back(self): return _example.msgVector_back(self)
    def assign(self, *args): return _example.msgVector_assign(self, *args)
    def resize(self, *args): return _example.msgVector_resize(self, *args)
    def insert(self, *args): return _example.msgVector_insert(self, *args)
    def reserve(self, *args): return _example.msgVector_reserve(self, *args)
    def capacity(self): return _example.msgVector_capacity(self)
    __swig_destroy__ = _example.delete_msgVector
    __del__ = lambda self : None;
msgVector_swigregister = _example.msgVector_swigregister
msgVector_swigregister(msgVector)

class RuntimeError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _example.new_RuntimeError(*args)
        try: self.this.append(this)
        except: self.this = this
    def message(self): return _example.RuntimeError_message(self)
    __swig_destroy__ = _example.delete_RuntimeError
    __del__ = lambda self : None;
RuntimeError_swigregister = _example.RuntimeError_swigregister
RuntimeError_swigregister(RuntimeError)

class SDLError(RuntimeError):
    __swig_setmethods__ = {}
    for _s in [RuntimeError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDLError, name, value)
    __swig_getmethods__ = {}
    for _s in [RuntimeError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SDLError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _example.new_SDLError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_SDLError
    __del__ = lambda self : None;
SDLError_swigregister = _example.SDLError_swigregister
SDLError_swigregister(SDLError)

class TTFError(RuntimeError):
    __swig_setmethods__ = {}
    for _s in [RuntimeError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTFError, name, value)
    __swig_getmethods__ = {}
    for _s in [RuntimeError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTFError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _example.new_TTFError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_TTFError
    __del__ = lambda self : None;
TTFError_swigregister = _example.TTFError_swigregister
TTFError_swigregister(TTFError)


def itos(*args):
  return _example.itos(*args)
itos = _example.itos
class QTError(RuntimeError):
    __swig_setmethods__ = {}
    for _s in [RuntimeError]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QTError, name, value)
    __swig_getmethods__ = {}
    for _s in [RuntimeError]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QTError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _example.new_QTError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_QTError
    __del__ = lambda self : None;
QTError_swigregister = _example.QTError_swigregister
QTError_swigregister(QTError)

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keyPress"] = _example.Event_keyPress_set
    __swig_getmethods__["keyPress"] = _example.Event_keyPress_get
    if _newclass:keyPress = _swig_property(_example.Event_keyPress_get, _example.Event_keyPress_set)
    __swig_setmethods__["quit"] = _example.Event_quit_set
    __swig_getmethods__["quit"] = _example.Event_quit_get
    if _newclass:quit = _swig_property(_example.Event_quit_get, _example.Event_quit_set)
    __swig_setmethods__["key"] = _example.Event_key_set
    __swig_getmethods__["key"] = _example.Event_key_get
    if _newclass:key = _swig_property(_example.Event_key_get, _example.Event_key_set)
    def __init__(self): 
        this = _example.new_Event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_Event
    __del__ = lambda self : None;
Event_swigregister = _example.Event_swigregister
Event_swigregister(Event)

class Display(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Display, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Display, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _example.new_Display()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_Display
    __del__ = lambda self : None;
    def height(self): return _example.Display_height(self)
    def width(self): return _example.Display_width(self)
    def create(self, *args): return _example.Display_create(self, *args)
    def setColor(self, *args): return _example.Display_setColor(self, *args)
    def fillRect(self, *args): return _example.Display_fillRect(self, *args)
    def drawText(self, *args): return _example.Display_drawText(self, *args)
    def getTextWidth(self, *args): return _example.Display_getTextWidth(self, *args)
    def update(self): return _example.Display_update(self)
    def surface(self): return _example.Display_surface(self)
    def blit(self, *args): return _example.Display_blit(self, *args)
    def pollEvents(self, *args): return _example.Display_pollEvents(self, *args)
Display_swigregister = _example.Display_swigregister
Display_swigregister(Display)

class QTMovie(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QTMovie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QTMovie, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _example.new_QTMovie(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_QTMovie
    __del__ = lambda self : None;
    def filename(self): return _example.QTMovie_filename(self)
    def playing(self): return _example.QTMovie_playing(self)
    def width(self): return _example.QTMovie_width(self)
    def height(self): return _example.QTMovie_height(self)
    def duration(self): return _example.QTMovie_duration(self)
    def decode(self): return _example.QTMovie_decode(self)
    def unlock(self, *args): return _example.QTMovie_unlock(self, *args)
    def lock(self): return _example.QTMovie_lock(self)
    def start(self): return _example.QTMovie_start(self)
    def stop(self): return _example.QTMovie_stop(self)
    __swig_getmethods__["init"] = lambda x: _example.QTMovie_init
    if _newclass:init = staticmethod(_example.QTMovie_init)
    __swig_getmethods__["quit"] = lambda x: _example.QTMovie_quit
    if _newclass:quit = staticmethod(_example.QTMovie_quit)
    __swig_getmethods__["createSurface"] = lambda x: _example.QTMovie_createSurface
    if _newclass:createSurface = staticmethod(_example.QTMovie_createSurface)
    __swig_getmethods__["deleteSurface"] = lambda x: _example.QTMovie_deleteSurface
    if _newclass:deleteSurface = staticmethod(_example.QTMovie_deleteSurface)
QTMovie_swigregister = _example.QTMovie_swigregister
QTMovie_swigregister(QTMovie)

def QTMovie_init():
  return _example.QTMovie_init()
QTMovie_init = _example.QTMovie_init

def QTMovie_quit():
  return _example.QTMovie_quit()
QTMovie_quit = _example.QTMovie_quit

def QTMovie_createSurface(*args):
  return _example.QTMovie_createSurface(*args)
QTMovie_createSurface = _example.QTMovie_createSurface

def QTMovie_deleteSurface(*args):
  return _example.QTMovie_deleteSurface(*args)
QTMovie_deleteSurface = _example.QTMovie_deleteSurface

class RtMidi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtMidi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RtMidi, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def openPort(self, portNumber=0): return _example.RtMidi_openPort(self, portNumber)
    def openVirtualPort(self): return _example.RtMidi_openVirtualPort(self)
    def getPortCount(self): return _example.RtMidi_getPortCount(self)
    def getPortName(self, portNumber=0): return _example.RtMidi_getPortName(self, portNumber)
    def closePort(self): return _example.RtMidi_closePort(self)
RtMidi_swigregister = _example.RtMidi_swigregister
RtMidi_swigregister(RtMidi)

class RtMidiIn(RtMidi):
    __swig_setmethods__ = {}
    for _s in [RtMidi]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtMidiIn, name, value)
    __swig_getmethods__ = {}
    for _s in [RtMidi]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RtMidiIn, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _example.new_RtMidiIn()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _example.delete_RtMidiIn
    __del__ = lambda self : None;
    def openPort(self, portNumber=0): return _example.RtMidiIn_openPort(self, portNumber)
    def openVirtualPort(self): return _example.RtMidiIn_openVirtualPort(self)
    def setCallback(self, *args): return _example.RtMidiIn_setCallback(self, *args)
    def cancelCallback(self): return _example.RtMidiIn_cancelCallback(self)
    def closePort(self): return _example.RtMidiIn_closePort(self)
    def getPortCount(self): return _example.RtMidiIn_getPortCount(self)
    def getPortName(self, portNumber=0): return _example.RtMidiIn_getPortName(self, portNumber)
    def setQueueSizeLimit(self, *args): return _example.RtMidiIn_setQueueSizeLimit(self, *args)
    def ignoreTypes(self, midiSysex=True, midiTime=True, midiSense=True): return _example.RtMidiIn_ignoreTypes(self, midiSysex, midiTime, midiSense)
    def getMessage(self, *args): return _example.RtMidiIn_getMessage(self, *args)
RtMidiIn_swigregister = _example.RtMidiIn_swigregister
RtMidiIn_swigregister(RtMidiIn)

class RtMidiOut(RtMidi):
    __swig_setmethods__ = {}
    for _s in [RtMidi]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RtMidiOut, name, value)
    __swig_getmethods__ = {}
    for _s in [RtMidi]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RtMidiOut, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _example.delete_RtMidiOut
    __del__ = lambda self : None;
    def openPort(self, portNumber=0): return _example.RtMidiOut_openPort(self, portNumber)
    def closePort(self): return _example.RtMidiOut_closePort(self)
    def openVirtualPort(self): return _example.RtMidiOut_openVirtualPort(self)
    def getPortCount(self): return _example.RtMidiOut_getPortCount(self)
    def getPortName(self, *args): return _example.RtMidiOut_getPortName(self, *args)
    def sendMessage(self, *args): return _example.RtMidiOut_sendMessage(self, *args)
RtMidiOut_swigregister = _example.RtMidiOut_swigregister
RtMidiOut_swigregister(RtMidiOut)

# This file is compatible with both classic and new-style classes.


